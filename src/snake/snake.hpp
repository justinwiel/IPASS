// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#ifndef SNAKE_HPP
#define SNAKE_HPP
#include "hwlib.hpp"
#include "../../lib/MPU.hpp"

using namespace hwlib;
class block {
protected:
    window & w;
public:
    xy start;
    xy end;
    block(window & w,xy  start, xy  end):
        w(w),
        start(start),
        end(end)
        {}
    virtual void draw() = 0;
    virtual void update() = 0;
    virtual void interact(const block & other) = 0;

};

class body: public block{
public:
    body(window & w,xy  start, xy  end):
        block(w,start,end)
        {}
    void  draw();
    void update();
    void interact(const block & other) ;
};


class head :public body {
private:
    xy eye_start;
    xy eye_end;
    xy start_prev = start;
    xy end_prev = end;
public:
    head(window & w,xy  start, xy  end,xy eye_start,xy eye_end):
        body(w,start,end),
        eye_start(eye_start),
        eye_end(eye_end)
        {}
    void  draw() override;
    void update() override;
    void interact(const block & other) override;
    void gameOver();
    void gameWon();
    bool overlaps(const block & other);
    void change_pos_x(int8_t val );
    void change_pos_y(int8_t val );
};


class snake{
protected:
    body tail[20];
public:
    
};
#endif
