// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#ifndef dodge_HPP
#define dodge_HPP
#include "hwlib.hpp"
#include "../../lib/MPU.hpp"

using namespace hwlib;

namespace dodge{
    class sprite {
    protected:
        window & w;
    public:
        xy start;
        xy end; 
        xy org_start = start;
        xy org_end = end;
        sprite(window & w,xy  start, xy  end):
            w(w),
            start(start),
            end(end)
            {}
        virtual void  draw() = 0;
        virtual void update() = 0;
        virtual void interact(sprite & other) = 0 ;
        virtual void reset() = 0;
    };

    class obstacle :public sprite{
    protected:
        xy speed;
    public:
        obstacle(window & w,xy  start, xy  end, xy speed):
            sprite(w,start,end),
            speed(speed)
            {}
        
    
        void  draw()override;
        void update()override;
        void interact(sprite & other) override;
        bool within(int x, int a,int b);
        void reset() override;
    };


    class Player :public obstacle {
    private:
        MPU6050 & chip;
        xy eye_start;
        xy eye_end;
        xy org_start_eye = eye_start;
        xy org_end_eye = eye_end;
    public:
        xy start_prev = start;
        xy end_prev = end;
        bool hit =false;
        Player(window & w,xy  start, xy  end, MPU6050 & chip,xy eye_start,xy eye_end):
            obstacle(w,start,end,xy(0,0)),
            chip(chip),
            eye_start(eye_start),
            eye_end(eye_end)
            {}
        void  draw() override;
        void update()override ;
        void interact(sprite & other)override ;
        void gameOver();
        void gameWon();
        void check_next_pos();
        bool overlaps(sprite & other) ;
        void change_pos_x(int8_t val );
        void change_pos_y(int8_t val );
        void reset();
    };

}

#endif
